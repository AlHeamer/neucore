<?php declare(strict_types=1);

namespace Neucore\Repository;

use Doctrine\ORM\EntityRepository;
use Neucore\Entity\Player;

/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @method Player|null find($id, $lockMode = null, $lockVersion = null)
 * @method Player|null findOneBy(array $criteria, array $orderBy = null)
 * @method Player[] findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class PlayerRepository extends EntityRepository
{
    /**
     * @return Player[]
     */
    public function findWithoutCharacters()
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NULL')
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findWithCharacters()
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NOT NULL')
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findWithCharactersAndStatus(string $status)
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NOT NULL')
            ->andWhere('p.status = :status')
            ->setParameter('status', $status)
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findWithInvalidToken()
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NOT NULL')
            ->andWhere('c.validToken = :valid_token')
            ->setParameter('valid_token', false)
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findWithNoToken()
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NOT NULL')
            ->andWhere('c.validToken IS NULL')
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findInCorporation(int $corporationId)
    {
        return $this->createQueryBuilder('p')
            ->leftJoin('p.characters', 'c')
            ->andWhere('c.id IS NOT NULL')
            ->andWhere('c.corporation = :corp')
            ->setParameter('corp', $corporationId)
            ->orderBy('p.name')
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int[] $groupIds
     * @return Player[]
     */
    public function findWithGroups(array $groupIds)
    {
        $qb = $this->createQueryBuilder('p');
        return $qb
            ->leftJoin('p.groups', 'g')
            ->where($qb->expr()->in('g.id', ':ids'))
            ->orderBy('p.id')
            ->setParameter('ids', $groupIds)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Player[]
     */
    public function findWithRole(int $roleId)
    {
        $qb = $this->createQueryBuilder('p');
        return $qb
            ->leftJoin('p.roles', 'r')
            ->where($qb->expr()->eq('r.id', ':id'))
            ->orderBy('p.id')
            ->setParameter('id', $roleId)
            ->getQuery()
            ->getResult();
    }
}
